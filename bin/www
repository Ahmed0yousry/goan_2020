#!/usr/bin/env node

/**
 * Module dependencies.
 */
var sequelize = require('../models/index');
var app = require('../app');
var debug = require('debug')('goan_2020:server');
var http = require('http');

var allModels = require('../models/all');
var playGroundOwner = allModels.playGroundOwner;
var playGround = allModels.playGround;
var field = allModels.field;
var player = allModels.player;
var reservation = allModels.reservation;
var playerWallet = allModels.playerWallet;
var ownerWallet = allModels.ownerWallet;
var paymentTransaction = allModels.paymentTransaction;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
// attaching playground to a playground owner
playGroundOwner.hasMany(playGround, { onDelete: 'CASCADE' });
playGround.belongsTo(playGroundOwner);

// attaching field to a playground  
playGround.hasMany(field, { onDelete: 'CASCADE' });
field.belongsTo(playGround);

player.hasMany(reservation);
reservation.belongsTo(player);

field.hasMany(reservation);
reservation.belongsTo(field);

player.hasOne(playerWallet, { onDelete: 'CASCADE' });
playerWallet.belongsTo(player);

playGroundOwner.hasOne(ownerWallet, { onDelete: 'CASCADE' });
ownerWallet.belongsTo(playGroundOwner);

player.hasMany(paymentTransaction);
paymentTransaction.belongsTo(player);

playGroundOwner.hasMany(paymentTransaction);
paymentTransaction.belongsTo(playGroundOwner);

// playGround.sync({ force: true })
sequelize.sync({ force: true })
// sequelize.sync()
    .then(res => {
        console.log("connection and sync is ok");
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(err => {
        console.log(err);
    });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}